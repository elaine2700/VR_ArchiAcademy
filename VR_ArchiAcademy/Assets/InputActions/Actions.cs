//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputActions/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""Interaction"",
            ""id"": ""33486981-3d03-4779-aeda-97864e97c4d8"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""3896307a-d462-4d19-9492-b9772368e073"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBlock"",
                    ""type"": ""Value"",
                    ""id"": ""2145e2f9-5a0a-4cea-aa12-5a6cf92703b4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChooseBlock"",
                    ""type"": ""Button"",
                    ""id"": ""665ca700-5fd4-46d6-b957-169f25a472e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""3a57694f-42c0-4d33-9c52-63cf2369514c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fcd85f58-4cb8-4579-bc7a-ff99929e7639"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d4449a9-102a-45b3-8ecf-d97afe5f22e6"",
                    ""path"": ""<HID::Unknown Joy-Con (R)>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b6e50e0-ee00-48fb-b59b-d193a9deddc8"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8935dd9f-76bf-40a2-97f6-45adaeb789f7"",
                    ""path"": ""<HID::Unknown Joy-Con (R)>/hat"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3292e11e-158e-4151-a4e0-4ea45e7c83b8"",
                    ""path"": ""<XRController>{RightHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3594bd96-c4d1-411e-8f29-481ee72e5385"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0a95453-bfa9-4fda-9496-c097c4032357"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aebc2914-0fcb-453b-a9fc-26bdc187429b"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb1966aa-eed5-4d78-9b48-b73e5eb3675f"",
                    ""path"": ""<HID::Unknown Joy-Con (R)>/button16"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tools"",
            ""id"": ""59c1f930-d793-4c05-8226-61a25c6caac6"",
            ""actions"": [
                {
                    ""name"": ""Swaptools"",
                    ""type"": ""Button"",
                    ""id"": ""983d4f0c-4351-4b0c-ae49-e027936bace1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScaleWorld"",
                    ""type"": ""Button"",
                    ""id"": ""0c17b7cf-fa27-41e9-949b-9a70c68a901a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da4252b1-978c-49a3-98da-75430bf74f90"",
                    ""path"": ""<HID::Unknown Joy-Con (R)>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScaleWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4893d55-1778-4a08-be00-5bde99637a01"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScaleWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4115a38-ad34-4588-b925-79a99f6eb954"",
                    ""path"": ""<HID::Unknown Joy-Con (R)>/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swaptools"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c6a03b-8772-45c1-85b8-c49deefa17df"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swaptools"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""cdfa5f63-6156-4b48-bd5f-472c1bba229a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c95fd3e0-0d1d-4088-b700-36334095ec38"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""ddf41fa0-d5e3-4f87-98dc-e70d65800102"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fly"",
                    ""type"": ""Value"",
                    ""id"": ""628e572a-2ca3-439e-9992-33e8d059ba89"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset Horizontal"",
                    ""type"": ""Button"",
                    ""id"": ""0eff3ae2-9652-4262-a4fb-3d6693363bf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5effbf6c-5a4c-4721-8ce8-f738c8679e4d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3415c69-fedf-4861-b473-f4e35f1263b5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7a6aa438-ac53-48bc-b37f-290ab5b103c0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f7d00309-74cb-4445-821a-2e3520904ca7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9d6d9cb0-70c5-4d5c-9499-f81eacc4f950"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""ee16eb8a-f56d-4916-9da4-a5f104a41d03"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75b53d40-e8e5-4f0e-8328-3ce551824873"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b4256420-e53b-4ee3-b840-dd8009a04104"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb8d8612-e81d-4031-a83e-48bef256e8ac"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d7259c48-0f7b-4b9e-b6aa-61d4c1615db8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""IK"",
                    ""id"": ""9e98ae3b-2066-4426-8188-62413c5b705f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""21b3b10d-77c3-41d4-b892-505ce0054cb9"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""445ff544-7a74-4520-b65b-544af74c484a"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""26d9fc60-c068-4ff2-a90d-cd5cf6d16acc"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Confirm = m_Interaction.FindAction("Confirm", throwIfNotFound: true);
        m_Interaction_RotateBlock = m_Interaction.FindAction("RotateBlock", throwIfNotFound: true);
        m_Interaction_ChooseBlock = m_Interaction.FindAction("ChooseBlock", throwIfNotFound: true);
        m_Interaction_Drag = m_Interaction.FindAction("Drag", throwIfNotFound: true);
        // Tools
        m_Tools = asset.FindActionMap("Tools", throwIfNotFound: true);
        m_Tools_Swaptools = m_Tools.FindAction("Swaptools", throwIfNotFound: true);
        m_Tools_ScaleWorld = m_Tools.FindAction("ScaleWorld", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Move = m_Camera.FindAction("Move", throwIfNotFound: true);
        m_Camera_Look = m_Camera.FindAction("Look", throwIfNotFound: true);
        m_Camera_Fly = m_Camera.FindAction("Fly", throwIfNotFound: true);
        m_Camera_ResetHorizontal = m_Camera.FindAction("Reset Horizontal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Confirm;
    private readonly InputAction m_Interaction_RotateBlock;
    private readonly InputAction m_Interaction_ChooseBlock;
    private readonly InputAction m_Interaction_Drag;
    public struct InteractionActions
    {
        private @Actions m_Wrapper;
        public InteractionActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_Interaction_Confirm;
        public InputAction @RotateBlock => m_Wrapper.m_Interaction_RotateBlock;
        public InputAction @ChooseBlock => m_Wrapper.m_Interaction_ChooseBlock;
        public InputAction @Drag => m_Wrapper.m_Interaction_Drag;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Confirm.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnConfirm;
                @RotateBlock.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnRotateBlock;
                @RotateBlock.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnRotateBlock;
                @RotateBlock.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnRotateBlock;
                @ChooseBlock.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnChooseBlock;
                @ChooseBlock.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnChooseBlock;
                @ChooseBlock.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnChooseBlock;
                @Drag.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrag;
                @Drag.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrag;
                @Drag.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrag;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @RotateBlock.started += instance.OnRotateBlock;
                @RotateBlock.performed += instance.OnRotateBlock;
                @RotateBlock.canceled += instance.OnRotateBlock;
                @ChooseBlock.started += instance.OnChooseBlock;
                @ChooseBlock.performed += instance.OnChooseBlock;
                @ChooseBlock.canceled += instance.OnChooseBlock;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);

    // Tools
    private readonly InputActionMap m_Tools;
    private IToolsActions m_ToolsActionsCallbackInterface;
    private readonly InputAction m_Tools_Swaptools;
    private readonly InputAction m_Tools_ScaleWorld;
    public struct ToolsActions
    {
        private @Actions m_Wrapper;
        public ToolsActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swaptools => m_Wrapper.m_Tools_Swaptools;
        public InputAction @ScaleWorld => m_Wrapper.m_Tools_ScaleWorld;
        public InputActionMap Get() { return m_Wrapper.m_Tools; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToolsActions set) { return set.Get(); }
        public void SetCallbacks(IToolsActions instance)
        {
            if (m_Wrapper.m_ToolsActionsCallbackInterface != null)
            {
                @Swaptools.started -= m_Wrapper.m_ToolsActionsCallbackInterface.OnSwaptools;
                @Swaptools.performed -= m_Wrapper.m_ToolsActionsCallbackInterface.OnSwaptools;
                @Swaptools.canceled -= m_Wrapper.m_ToolsActionsCallbackInterface.OnSwaptools;
                @ScaleWorld.started -= m_Wrapper.m_ToolsActionsCallbackInterface.OnScaleWorld;
                @ScaleWorld.performed -= m_Wrapper.m_ToolsActionsCallbackInterface.OnScaleWorld;
                @ScaleWorld.canceled -= m_Wrapper.m_ToolsActionsCallbackInterface.OnScaleWorld;
            }
            m_Wrapper.m_ToolsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Swaptools.started += instance.OnSwaptools;
                @Swaptools.performed += instance.OnSwaptools;
                @Swaptools.canceled += instance.OnSwaptools;
                @ScaleWorld.started += instance.OnScaleWorld;
                @ScaleWorld.performed += instance.OnScaleWorld;
                @ScaleWorld.canceled += instance.OnScaleWorld;
            }
        }
    }
    public ToolsActions @Tools => new ToolsActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Move;
    private readonly InputAction m_Camera_Look;
    private readonly InputAction m_Camera_Fly;
    private readonly InputAction m_Camera_ResetHorizontal;
    public struct CameraActions
    {
        private @Actions m_Wrapper;
        public CameraActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Camera_Move;
        public InputAction @Look => m_Wrapper.m_Camera_Look;
        public InputAction @Fly => m_Wrapper.m_Camera_Fly;
        public InputAction @ResetHorizontal => m_Wrapper.m_Camera_ResetHorizontal;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnLook;
                @Fly.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnFly;
                @Fly.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnFly;
                @Fly.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnFly;
                @ResetHorizontal.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnResetHorizontal;
                @ResetHorizontal.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnResetHorizontal;
                @ResetHorizontal.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnResetHorizontal;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fly.started += instance.OnFly;
                @Fly.performed += instance.OnFly;
                @Fly.canceled += instance.OnFly;
                @ResetHorizontal.started += instance.OnResetHorizontal;
                @ResetHorizontal.performed += instance.OnResetHorizontal;
                @ResetHorizontal.canceled += instance.OnResetHorizontal;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface IInteractionActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnRotateBlock(InputAction.CallbackContext context);
        void OnChooseBlock(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
    }
    public interface IToolsActions
    {
        void OnSwaptools(InputAction.CallbackContext context);
        void OnScaleWorld(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFly(InputAction.CallbackContext context);
        void OnResetHorizontal(InputAction.CallbackContext context);
    }
}
